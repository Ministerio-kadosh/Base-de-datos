#!/usr/bin/env python3
"""
Script de prueba para verificar la conexi√≥n con Supabase
y las operaciones b√°sicas del sistema de gesti√≥n Flask
"""

import os
import sys
from datetime import datetime
from supabase import create_client, Client

def test_supabase_connection():
    """Probar conexi√≥n b√°sica con Supabase"""
    print("üîç Probando conexi√≥n con Supabase...")
    
    # Verificar variables de entorno
    supabase_url = os.environ.get('SUPABASE_URL')
    supabase_key = os.environ.get('SUPABASE_KEY')
    
    if not supabase_url or not supabase_key:
        print("‚ùå Error: Variables de entorno SUPABASE_URL y SUPABASE_KEY no configuradas")
        print("   Configura las variables de entorno o crea un archivo .env")
        return False
    
    try:
        # Crear cliente Supabase
        supabase: Client = create_client(supabase_url, supabase_key)
        print("‚úÖ Cliente Supabase creado exitosamente")
        
        # Probar conexi√≥n b√°sica
        response = supabase.table('administradores').select('count').execute()
        print("‚úÖ Conexi√≥n con Supabase establecida correctamente")
        
        return True, supabase
        
    except Exception as e:
        print(f"‚ùå Error al conectar con Supabase: {str(e)}")
        return False, None

def test_table_operations(supabase: Client):
    """Probar operaciones b√°sicas en las tablas"""
    print("\nüîç Probando operaciones en tablas...")
    
    # Lista de tablas a probar
    tables = [
        'administradores',
        'predicadores', 
        'reuniones',
        'calendario',
        'bandeja',
        'asistencias',
        'jovenes',
        'finanzas',
        'historial_cambios',
        'informes'
    ]
    
    for table in tables:
        try:
            # Probar SELECT b√°sico
            response = supabase.table(table).select('*').limit(1).execute()
            print(f"‚úÖ Tabla '{table}': Acceso correcto")
            
        except Exception as e:
            print(f"‚ùå Tabla '{table}': Error - {str(e)}")

def test_admin_operations(supabase: Client):
    """Probar operaciones espec√≠ficas de administradores"""
    print("\nüîç Probando operaciones de administradores...")
    
    try:
        # Verificar si existe el admin inicial
        response = supabase.table('administradores').select('*').eq('nombre', 'Administrador Principal').execute()
        
        if response.data:
            print("‚úÖ Administrador inicial encontrado")
            admin = response.data[0]
            print(f"   - Nombre: {admin['nombre']}")
            print(f"   - C√≥digo: {admin['codigo']}")
            print(f"   - Estado: {admin['estado']}")
        else:
            print("‚ö†Ô∏è  Administrador inicial no encontrado")
            print("   Ejecuta el script SQL para crear los datos iniciales")
            
    except Exception as e:
        print(f"‚ùå Error al verificar administradores: {str(e)}")

def test_predicadores_operations(supabase: Client):
    """Probar operaciones de predicadores"""
    print("\nüîç Probando operaciones de predicadores...")
    
    try:
        # Obtener predicadores
        response = supabase.table('predicadores').select('*').execute()
        print(f"‚úÖ Predicadores encontrados: {len(response.data)}")
        
        if response.data:
            for predicador in response.data[:3]:  # Mostrar solo los primeros 3
                print(f"   - {predicador['nombre']} {predicador['apellido']}")
                
    except Exception as e:
        print(f"‚ùå Error al obtener predicadores: {str(e)}")

def test_insert_operation(supabase: Client):
    """Probar operaci√≥n de inserci√≥n"""
    print("\nüîç Probando operaci√≥n de inserci√≥n...")
    
    try:
        # Datos de prueba
        test_data = {
            'objetivo': 'Prueba de conexi√≥n',
            'descripcion': 'Esta es una tarea de prueba para verificar la conexi√≥n con Supabase',
            'estado': 'Pendiente',
            'fecha': '2025-07-12T17:16:27.622756+00:00',
            'usuario': 'sistema'
        }
        
        # Insertar en Bandeja
        response = supabase.table('bandeja').insert(test_data).execute()
        
        if response.data:
            print("‚úÖ Inserci√≥n exitosa")
            print(f"   - ID creado: {response.data[0]['id']}")
            
            # Limpiar - eliminar el registro de prueba
            supabase.table('bandeja').delete().eq('id', response.data[0]['id']).execute()
            print("‚úÖ Registro de prueba eliminado")
        else:
            print("‚ùå Error en la inserci√≥n")
            
    except Exception as e:
        print(f"‚ùå Error en operaci√≥n de inserci√≥n: {str(e)}")

def test_views(supabase: Client):
    """Probar vistas de la base de datos"""
    print("\nüîç Probando vistas...")
    
    try:
        # Probar vista de estad√≠sticas generales
        response = supabase.table('estadisticas_generales').select('*').execute()
        if response.data:
            stats = response.data[0]
            print("‚úÖ Vista estadisticas_generales:")
            print(f"   - Total predicadores: {stats.get('total_predicadores', 0)}")
            print(f"   - Total reuniones: {stats.get('total_reuniones', 0)}")
            print(f"   - Total j√≥venes: {stats.get('total_jovenes', 0)}")
            print(f"   - Tareas pendientes: {stats.get('tareas_pendientes', 0)}")
        else:
            print("‚ö†Ô∏è  Vista estadisticas_generales no disponible")
            
    except Exception as e:
        print(f"‚ùå Error al probar vistas: {str(e)}")

def main():
    """Funci√≥n principal de pruebas"""
    print("=" * 60)
    print("üß™ PRUEBAS DE CONEXI√ìN SUPABASE")
    print("=" * 60)
    
    # Cargar variables de entorno desde .env si existe
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ Variables de entorno cargadas desde .env")
    except ImportError:
        print("‚ö†Ô∏è  python-dotenv no instalado, usando variables del sistema")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error al cargar .env: {str(e)}")
    
    # Probar conexi√≥n
    success, supabase = test_supabase_connection()
    
    if not success:
        print("\n‚ùå No se pudo establecer conexi√≥n con Supabase")
        print("   Verifica:")
        print("   1. Las variables de entorno SUPABASE_URL y SUPABASE_KEY")
        print("   2. Que el proyecto de Supabase est√© activo")
        print("   3. Que las credenciales sean correctas")
        return
    
    # Ejecutar pruebas
    test_table_operations(supabase)
    test_admin_operations(supabase)
    test_predicadores_operations(supabase)
    test_insert_operation(supabase)
    test_views(supabase)
    
    print("\n" + "=" * 60)
    print("‚úÖ PRUEBAS COMPLETADAS")
    print("=" * 60)
    print("Si todas las pruebas pasaron, tu configuraci√≥n est√° correcta.")
    print("Puedes ejecutar tu aplicaci√≥n Flask con: python app.py")

if __name__ == "__main__":
    main() 